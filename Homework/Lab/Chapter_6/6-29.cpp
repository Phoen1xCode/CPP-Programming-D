// 6-29 运行下列的程序，观察执行结果，指出该程序是如何通过指针造成安全性问题的，思考如何避免这个问题的发生
#include <iostream>
using namespace std;
int main() {
    int arr[]={1,2,3};
    double *p=reinterpret_cast<double *>(&arr[0]);
    *p=5;
    cout << arr[0] << " " << arr[1] << " " << arr[2] << endl;
    return 0;
}
/*
这段代码中的主要问题在于类型转换和指针的使用。在 main 函数中，首先创建了一个整数数组 arr，然后创建了一个 double 类型的指针 p，并使用 reinterpret_cast 将 arr 的第一个元素的地址转换为 double 类型的指针。

这里的问题是，int 和 double 是两种不同的数据类型，它们的大小和表示方式都可能不同。在大多数系统中，int 类型的大小为 4 字节，而 double 类型的大小为 8 字节。当你尝试通过 double 类型的指针来修改 int 类型的数据时，可能会导致未定义的行为，因为你可能会修改到 int 类型数据之外的内存区域。

在这个例子中，当你执行 *p=5; 时，你实际上是在尝试将一个 double 类型的值写入一个 int 类型的内存区域。这可能会导致 arr[1] 的值被意外地改变，因为 double 类型的数据可能会覆盖 int 类型数据之外的内存区域。

为了避免这种问题，你应该始终确保你的指针类型与你要操作的数据类型一致。如果你需要将一个 int 类型的值转换为 double 类型，你应该首先创建一个 double 类型的变量，然后将 int 类型的值赋给这个变量，而不是直接通过指针进行操作。
*/